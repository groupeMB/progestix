<?php

namespace Pharmacie\StockBundle\Entity;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\HttpFoundation\File\File;
use Vich\UploaderBundle\Mapping\Annotation as Vich;

use Symfony\Component\Validator\Constraints as Assert;

/**
 * Stock
 *
 * @ORM\Table(name="stock")
 * @ORM\Entity
 */
class Stock
{
    /**
     * @var integer
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var integer
     *
     * @ORM\Column(name="quantite", type="integer", nullable=true)
     */
    private $quantite = 0;

    /**
     * @var integer
     *
     * @ORM\Column(name="seuilMin", type="integer", nullable=false)
     */
    private $seuilmin;


    /**
     * @var string
     *
     * @ORM\Column(name="description", type="string", length=255, nullable=false)
     */
    private $description;


    /**
     * @var string
     *
     * @ORM\Column(name="posologie", type="string", length=255, nullable=false)
     */
    private $posologie;

    /**
     * @var string
     *
     * @ORM\Column(name="libelle", type="string", length=100, nullable=false)
     */
    private $libelle;

    /**
     * @var string
     *
     * @ORM\Column(name="reference", type="string", length=50, nullable=false)
     */
    private $reference;

        /**
     * @var Pharmacie\StockBundle\Entity\Categorie
     *
     * @ORM\ManyToOne(targetEntity="Pharmacie\StockBundle\Entity\Categorie")
     * @ORM\JoinColumns({
     *   @ORM\JoinColumn(name="categorie", referencedColumnName="id")
     * })
     */
    private $categorie;

    /**
    *
    * @var Pharmacie\StockBundle\Entity\Keyword
    * @ORM\OneToMany(targetEntity="Pharmacie\StockBundle\Entity\Keyword", mappedBy="produit", cascade={"remove", "persist", "refresh"})
    * 
    */
    private $keywords;

    /**
     * 
     * @Vich\UploadableField(mapping="produit_image", fileNameProperty="imageName")
     * 
     * @var File
     */
    private $imageFile;

    /**
     * @ORM\Column(type="string", length=255)
     *
     * @var string
     */
    private $imageName;

    /**
     * @ORM\Column(type="datetime")
     *
     * @var \DateTime
     */
    private $updatedAt;


    /**
    *
    * @var Pharmacie\StockBundle\Entity\ChampProduit
    * @ORM\OneToMany(targetEntity="Pharmacie\StockBundle\Entity\ChampProduit", mappedBy="produit", cascade={"remove", "persist", "refresh"})
    * 
    */
    private $champs;




    public function getContent(){
        return  array(
            'id' => $this->id,
            'quantite' => $this->quantite,
            'seuilMin' => $this->seuilmin
         );
    }


    /**
     * Constructor
     */
    public function __construct(){

        $this->keywords = new \Doctrine\Common\Collections\ArrayCollection();

    }

    public function getUploadRootDir(){

        return __DIR__ . '/../../../web/uploads';
    }

    /**
     * Get id
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set quantite
     *
     * @param integer $quantite
     *
     * @return Stock
     */
    public function setQuantite($quantite)
    {
        $this->quantite = $quantite;

        return $this;
    }

    /**
     * Get quantite
     *
     * @return integer
     */
    public function getQuantite()
    {
        return $this->quantite;
    }

    /**
     * Set seuilmin
     *
     * @param integer $seuilmin
     *
     * @return Stock
     */
    public function setSeuilmin($seuilmin)
    {
        $this->seuilmin = $seuilmin;

        return $this;
    }

    /**
     * Get seuilmin
     *
     * @return integer
     */
    public function getSeuilmin()
    {
        return $this->seuilmin;
    }

    /**
     * Set description
     *
     * @param string $description
     *
     * @return Stock
     */
    public function setDescription($description)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Get description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Set posologie
     *
     * @param string $posologie
     *
     * @return Stock
     */
    public function setPosologie($posologie)
    {
        $this->posologie = $posologie;

        return $this;
    }

    /**
     * Get posologie
     *
     * @return string
     */
    public function getPosologie()
    {
        return $this->posologie;
    }

    /**
     * Set libelle
     *
     * @param string $libelle
     *
     * @return Stock
     */
    public function setLibelle($libelle)
    {
        $this->libelle = $libelle;

        return $this;
    }

    /**
     * Get libelle
     *
     * @return string
     */
    public function getLibelle()
    {
        return $this->libelle;
    }

    /**
     * Set reference
     *
     * @param string $reference
     *
     * @return Stock
     */
    public function setReference($reference)
    {
        $this->reference = $reference;

        return $this;
    }

    /**
     * Get reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->reference;
    }

    /**
     * Set categorie
     *
     * @param \Pharmacie\StockBundle\Entity\Categorie $categorie
     *
     * @return Stock
     */
    public function setCategorie(\Pharmacie\StockBundle\Entity\Categorie $categorie = null)
    {
        $this->categorie = $categorie;

        return $this;
    }

    /**
     * Get categorie
     *
     * @return \Pharmacie\StockBundle\Entity\Categorie
     */
    public function getCategorie()
    {
        return $this->categorie;
    }

    /**
     * Add keyword
     *
     * @param \Pharmacie\StockBundle\Entity\Keyword $keyword
     *
     * @return Stock
     */
    public function addKeyword(\Pharmacie\StockBundle\Entity\Keyword $keyword)
    {
        $keyword->setProduit($this);
        $this->keywords[] = $keyword;

        return $this;
    }

    /**
     * Remove keyword
     *
     * @param \Pharmacie\StockBundle\Entity\Keyword $keyword
     */
    public function removeKeyword(\Pharmacie\StockBundle\Entity\Keyword $keyword)
    {
        $this->keywords->removeElement($keyword);
    }

    /**
     * Get keywords
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getKeywords()
    {
        return $this->keywords;
    }

    /**
     * Set image
     *
     * @param \Pharmacie\StockBundle\Entity\Image $image
     *
     * @return Stock
     */
    public function setImage(\Pharmacie\StockBundle\Entity\Image $image = null)
    {
        $this->image = $image;

        return $this;
    }

    /**
     * Get image
     *
     * @return \Pharmacie\StockBundle\Entity\Image
     */
    public function getImage()
    {
        return $this->image;
    }

    public function __toString(){
        return $this->getLibelle();
    }


    /**
     * Add champ
     *
     * @param \Pharmacie\StockBundle\Entity\ChampProduit $champ
     *
     * @return Stock
     */
    public function addChamp(\Pharmacie\StockBundle\Entity\ChampProduit $champ)
    {
        $champ->setProduit($this);
        $this->champs[] = $champ;

        return $this;
    }

    /**
     * Remove champ
     *
     * @param \Pharmacie\StockBundle\Entity\ChampProduit $champ
     */
    public function removeChamp(\Pharmacie\StockBundle\Entity\ChampProduit $champ)
    {
        $this->champs->removeElement($champ);
    }

    /**
     * Get champs
     *
     * @return \Doctrine\Common\Collections\Collection
     */
    public function getChamps()
    {
        return $this->champs;
    }

    /**
     * Set imageName
     *
     * @param string $imageName
     *
     * @return Stock
     */
    public function setImageName($imageName)
    {
        $this->imageName = $imageName;

        return $this;
    }

    /**
     * Get imageName
     *
     * @return string
     */
    public function getImageName()
    {
        return $this->imageName;
    }

    /**
     * Set updatedAt
     *
     * @param \DateTime $updatedAt
     *
     * @return Stock
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->updatedAt = $updatedAt;

        return $this;
    }

    /**
     * Get updatedAt
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->updatedAt;
    }
}
